basePath: /api/v1
definitions:
  dto.APIErrorResponse:
    properties:
      data:
        example: "null"
        type: string
      error:
        example: true
        type: boolean
      length:
        example: 0
        type: integer
      message:
        example: Invalid credentials
        type: string
    type: object
  dto.APIObjectResponse:
    properties:
      data: {}
      error:
        example: false
        type: boolean
      length:
        example: 171
        type: integer
      message:
        example: Success
        type: string
    type: object
  dto.CharacterCreateRequest:
    properties:
      class_id:
        type: string
      description:
        type: string
      privacy:
        allOf:
        - $ref: '#/definitions/model.Privacy'
        enum:
        - public
        - private
      race_id:
        type: string
      title:
        maxLength: 200
        type: string
    required:
    - class_id
    - description
    - race_id
    - title
    type: object
  dto.CharacterResponse:
    properties:
      class_id:
        type: string
      description:
        type: string
      id:
        type: string
      images:
        items:
          type: string
        type: array
      privacy:
        $ref: '#/definitions/model.Privacy'
      race_id:
        type: string
      status:
        type: string
      title:
        type: string
      user_id:
        type: string
    type: object
  dto.CharacterUpdateRequest:
    properties:
      class_id:
        type: string
      description:
        type: string
      privacy:
        allOf:
        - $ref: '#/definitions/model.Privacy'
        enum:
        - public
        - private
      race_id:
        type: string
      title:
        maxLength: 200
        type: string
    type: object
  dto.ClassResponse:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.LoginResponse:
    properties:
      token:
        type: string
    type: object
  dto.OptionReq:
    properties:
      name:
        maxLength: 100
        type: string
    required:
    - name
    type: object
  dto.QuestCreateRequest:
    properties:
      description:
        type: string
      privacy:
        allOf:
        - $ref: '#/definitions/model.Privacy'
        enum:
        - public
        - private
      quest_level_id:
        type: string
      title:
        maxLength: 200
        type: string
    required:
    - description
    - quest_level_id
    - title
    type: object
  dto.QuestLevelResponse:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  dto.QuestResponse:
    properties:
      description:
        type: string
      id:
        type: string
      images:
        items:
          type: string
        type: array
      privacy:
        $ref: '#/definitions/model.Privacy'
      quest_level:
        type: string
      status:
        type: string
      title:
        type: string
    type: object
  dto.QuestUpdateRequest:
    properties:
      description:
        type: string
      privacy:
        allOf:
        - $ref: '#/definitions/model.Privacy'
        enum:
        - public
        - private
      quest_level_id:
        type: string
      title:
        maxLength: 200
        type: string
    type: object
  dto.RaceResponse:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  model.Privacy:
    enum:
    - public
    - private
    type: string
    x-enum-varnames:
    - PrivacyPublic
    - PrivacyPrivate
host: localhost:8080
info:
  contact:
    name: API Support
    url: http://swagger.io/contact/
  description: API for managing D&D characters and quests.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Dungeon Dragon API Documentation
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token.
      parameters:
      - description: Login Request
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful login
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIObjectResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.LoginResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
      summary: Login get token
      tags:
      - authentication
  /characters:
    get:
      consumes:
      - application/json
      description: Retrieves a list of characters for the authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: List of characters
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIObjectResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.CharacterResponse'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
      security:
      - BearerAuth: []
      summary: List characters
      tags:
      - characters
    post:
      consumes:
      - application/json
      description: Creates a new character for the authenticated user.
      parameters:
      - description: Character Create Request
        in: body
        name: characterCreateRequest
        required: true
        schema:
          $ref: '#/definitions/dto.CharacterCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Character created successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIObjectResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Invalid request
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
      security:
      - BearerAuth: []
      summary: Create character
      tags:
      - characters
  /characters/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a character for the authenticated user.
      parameters:
      - description: Character ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Character deleted successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIObjectResponse'
            - properties:
                data:
                  type: string
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
        "404":
          description: Character not found
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
      security:
      - BearerAuth: []
      summary: Delete character
      tags:
      - characters
    put:
      consumes:
      - application/json
      description: Updates an existing character for the authenticated user.
      parameters:
      - description: Character ID
        in: path
        name: id
        required: true
        type: string
      - description: Character Update Request
        in: body
        name: characterUpdateRequest
        required: true
        schema:
          $ref: '#/definitions/dto.CharacterUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Character updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIObjectResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Invalid request
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
        "404":
          description: Character not found
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
      security:
      - BearerAuth: []
      summary: Update character
      tags:
      - characters
  /characters/{id}/images:
    post:
      consumes:
      - multipart/form-data
      description: Uploads an image for a specific character.
      parameters:
      - description: Character ID
        in: path
        name: id
        required: true
        type: string
      - description: List of character images (can upload multiple)
        in: formData
        name: images
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Character images uploaded successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIObjectResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Invalid request
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
      security:
      - BearerAuth: []
      summary: Upload character image
      tags:
      - images
  /options/classes:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all available classes.
      produces:
      - application/json
      responses:
        "200":
          description: List of classes
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIObjectResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.ClassResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
      security:
      - BearerAuth: []
      summary: List all classes
      tags:
      - options
    post:
      consumes:
      - application/json
      description: Creates a new class with the provided name.
      parameters:
      - description: Class to create
        in: body
        name: class
        required: true
        schema:
          $ref: '#/definitions/dto.OptionReq'
      produces:
      - application/json
      responses:
        "201":
          description: Class created successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIObjectResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
      security:
      - BearerAuth: []
      summary: Create a new class
      tags:
      - options
  /options/classes/{id}:
    put:
      consumes:
      - application/json
      description: Updates the name of an existing class identified by its ID.
      parameters:
      - description: Class ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated class data
        in: body
        name: class
        required: true
        schema:
          $ref: '#/definitions/dto.OptionReq'
      produces:
      - application/json
      responses:
        "200":
          description: Class updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIObjectResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
        "404":
          description: Class not found
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
      security:
      - BearerAuth: []
      summary: Update an existing class
      tags:
      - options
  /options/quest-levels:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all available quest levels.
      produces:
      - application/json
      responses:
        "200":
          description: List of quest levels
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIObjectResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.QuestLevelResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
      security:
      - BearerAuth: []
      summary: List all quest levels
      tags:
      - options
    post:
      consumes:
      - application/json
      description: Creates a new quest level with the provided name.
      parameters:
      - description: Quest level to create
        in: body
        name: questLevel
        required: true
        schema:
          $ref: '#/definitions/dto.OptionReq'
      produces:
      - application/json
      responses:
        "201":
          description: Quest level created successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIObjectResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
      security:
      - BearerAuth: []
      summary: Create a new quest level
      tags:
      - options
  /options/quest-levels/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an existing quest level identified by its ID.
      parameters:
      - description: Quest Level ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Quest level deleted successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIObjectResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
      security:
      - BearerAuth: []
      summary: Delete an existing quest level
      tags:
      - options
    put:
      consumes:
      - application/json
      description: Updates the name of an existing quest level identified by its ID.
      parameters:
      - description: Quest Level ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated quest level data
        in: body
        name: questLevel
        required: true
        schema:
          $ref: '#/definitions/dto.OptionReq'
      produces:
      - application/json
      responses:
        "200":
          description: Quest level updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIObjectResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
      security:
      - BearerAuth: []
      summary: Update an existing quest level
      tags:
      - options
  /options/races:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all available races.
      produces:
      - application/json
      responses:
        "200":
          description: List of races
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIObjectResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.RaceResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
      security:
      - BearerAuth: []
      summary: List all races
      tags:
      - options
    post:
      consumes:
      - application/json
      description: Creates a new race with the provided name.
      parameters:
      - description: Race to create
        in: body
        name: race
        required: true
        schema:
          $ref: '#/definitions/dto.OptionReq'
      produces:
      - application/json
      responses:
        "201":
          description: Race created successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIObjectResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
      security:
      - BearerAuth: []
      summary: Create a new race
      tags:
      - options
  /options/races/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an existing race identified by its ID.
      parameters:
      - description: Race ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Race deleted successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIObjectResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
      security:
      - BearerAuth: []
      summary: Delete an existing race
      tags:
      - options
    put:
      consumes:
      - application/json
      description: Updates the name of an existing race identified by its ID.
      parameters:
      - description: Race ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated race data
        in: body
        name: race
        required: true
        schema:
          $ref: '#/definitions/dto.OptionReq'
      produces:
      - application/json
      responses:
        "200":
          description: Race updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIObjectResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
      security:
      - BearerAuth: []
      summary: Update an existing race
      tags:
      - options
  /quests:
    get:
      consumes:
      - application/json
      description: Retrieves a list of quests for the authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: List of quests
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIObjectResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.QuestResponse'
                  type: array
              type: object
        "400":
          description: Invalid request
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
      security:
      - BearerAuth: []
      summary: List quests
      tags:
      - quests
    post:
      consumes:
      - application/json
      description: Creates a new quest for the authenticated user.
      parameters:
      - description: Quest creation payload
        in: body
        name: quest
        required: true
        schema:
          $ref: '#/definitions/dto.QuestCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Quest created successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIObjectResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Invalid request
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
      security:
      - BearerAuth: []
      summary: Create quest
      tags:
      - quests
  /quests/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a quest for the authenticated user.
      parameters:
      - description: Quest ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Quest deleted successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIObjectResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Invalid request
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
      security:
      - BearerAuth: []
      summary: Delete quest
      tags:
      - quests
    put:
      consumes:
      - application/json
      description: Updates an existing quest for the authenticated user.
      parameters:
      - description: Quest ID
        in: path
        name: id
        required: true
        type: string
      - description: Quest update payload
        in: body
        name: quest
        required: true
        schema:
          $ref: '#/definitions/dto.QuestUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Quest updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIObjectResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Invalid request
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
      security:
      - BearerAuth: []
      summary: Update quest
      tags:
      - quests
  /quests/{id}/images:
    post:
      consumes:
      - multipart/form-data
      description: Uploads an image for a specific quest.
      parameters:
      - description: Quest ID
        in: path
        name: id
        required: true
        type: string
      - description: List of character images (can upload multiple)
        in: formData
        name: images
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Quest images uploaded successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIObjectResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Invalid request
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIErrorResponse'
            - properties:
                data: {}
              type: object
      security:
      - BearerAuth: []
      summary: Upload quest image
      tags:
      - images
securityDefinitions:
  BearerAuth:
    description: Type "Bearer {token}" to authenticate.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
